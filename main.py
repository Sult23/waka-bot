replyimport logging
import os
from flask import Flask, request
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# Telegram bot token
TOKEN = os.environ.get("BOT_TOKEN")
bot = Bot(TOKEN)

# Flask app
app = Flask(__name__)

# –í–∫—É—Å—ã
FLAVORS = [
    "Blueberry Raspberry",
    "Dark Cherry",
    "Sakura Grape",
    "Banana Strawberry",
    "Strawberry Kiwi",
    "Watermelon Chill",
    "Fruity Chews"
]

(CHOOSING_FLAVOR, GET_NAME, GET_PHONE, GET_ADDRESS, GET_PAYMENT) = range(5)
ADMIN_USERNAME = "@sulttt2329"

def init_gsheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("WakaOrders").sheet1
    return sheet

def save_order_to_sheet(data):
    sheet = init_gsheet()
    row = [data['name'], data['phone'], data['address'], data['flavor'], data['payment'], datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
    sheet.append_row(row)

application = Application.builder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"], ["üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫—É—Å—ã"], ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç WakaStore. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú—ã –ø—Ä–æ–¥–∞—ë–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã Waka —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≥–æ—Ä–æ–¥—É –¢–∞—Ä–∞–∑.\n"
        "–û–ø–ª–∞—Ç–∞ Kaspi –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )

async def show_flavors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    flavors = "\n".join(f"- {f}" for f in FLAVORS)
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n{flavors}")

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[f] for f in FLAVORS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return CHOOSING_FLAVOR

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['flavor'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return GET_NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return GET_PHONE

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return GET_ADDRESS

async def get_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    keyboard = [["Kaspi", "–ù–∞–ª–∏—á–Ω—ã–º–∏"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GET_PAYMENT

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['payment'] = update.message.text
    data = context.user_data
    order_text = (
        "üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üí® –í–∫—É—Å: {data['flavor']}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
    await context.bot.send_message(chat_id=ADMIN_USERNAME, text=order_text, parse_mode="Markdown")
    save_order_to_sheet(data)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^(üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑)$"), order)],
    states={
        CHOOSING_FLAVOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        GET_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_payment)],
        GET_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.Regex("^(üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫—É—Å—ã)$"), show_flavors))
application.add_handler(MessageHandler(filters.Regex("^(‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)$"), info))
application.add_handler(conv)

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "ok"

@app.route('/')
@app.route('/healthcheck')
def healthcheck():
    return "Bot is running!"

if __name__ == '__main__':
    application.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=os.environ.get("WEBHOOK_URL")
    )
