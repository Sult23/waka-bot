import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes

# –í–∫—É—Å—ã
FLAVORS = [
    "Blueberry Raspberry",
    "Dark Cherry",
    "Sakura Grape",
    "Banana Strawberry",
    "Strawberry Kiwi",
    "Watermelon Chill",
    "Fruity Chews"
]

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(CHOOSING_FLAVOR, GET_NAME, GET_PHONE, GET_ADDRESS, GET_PAYMENT) = range(5)

# –ê–¥–º–∏–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_USERNAME = "@sulttt2329"

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"], ["üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫—É—Å—ã"], ["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç WakaStore. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú—ã –ø—Ä–æ–¥–∞—ë–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã Waka —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≥–æ—Ä–æ–¥—É –¢–∞—Ä–∞–∑.
"
        "–û–ø–ª–∞—Ç–∞ Kaspi –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )

async def show_flavors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    flavors = "\n".join(f"- {f}" for f in FLAVORS)
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n{flavors}")

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[f] for f in FLAVORS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return CHOOSING_FLAVOR

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['flavor'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return GET_NAME

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return GET_PHONE

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return GET_ADDRESS

async def get_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    keyboard = [["Kaspi", "–ù–∞–ª–∏—á–Ω—ã–º–∏"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GET_PAYMENT

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['payment'] = update.message.text
    data = context.user_data
    order_text = (
        "üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*

"
        f"üë§ –ò–º—è: {data['name']}
"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}
"
        f"üí® –í–∫—É—Å: {data['flavor']}
"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
    await context.bot.send_message(chat_id=ADMIN_USERNAME, text=order_text, parse_mode="Markdown")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    import os
    TOKEN = os.environ.get("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑)$"), order)],
        states={
            CHOOSING_FLAVOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            GET_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_payment)],
            GET_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫—É—Å—ã)$"), show_flavors))
    app.add_handler(MessageHandler(filters.Regex("^(‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)$"), info))
    app.add_handler(conv)

    app.run_polling()

if __name__ == "__main__":
    main()
